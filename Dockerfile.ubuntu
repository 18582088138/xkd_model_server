#
# Copyright (c) 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM ubuntu:18.04 as base_build

LABEL version="1.0.0"
LABEL description="OpenVINO Model Server"

ARG ovms_metadata_file


LABEL version="1.0.0"
LABEL description="OpenVINO Model Server"

ARG ov_source_branch=2020.3.0
ARG ovms_metadata_file
ARG ov_use_binary=1
ARG DLDT_PACKAGE_URL
ARG INSTALL_DIR=/opt/intel/openvino
ARG TEMP_DIR=/tmp/openvino_installer
ARG DL_INSTALL_DIR=/opt/intel/openvino/deployment_tools
ARG DL_DIR=/tmp
# build_type=[ opt, dbg ]
ARG build_type=dbg
ARG debug_bazel_flags=--strip=never\ --copt="-g"\ -c\ dbg


RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        curl \
        gcc-8 \
        g++-8 \
        git \
        libcurl4-openssl-dev \
        libssl-dev \
        uuid-dev \
        zlib1g-dev \
        libpulse-dev \
        libusb-1.0-0-dev \
        python-dev \
        python3-distutils \
        unzip \
        wget \
        automake \
        autoconf \
        libtool \
	libxml2-dev \
        autotools-dev \
	cpio \
	libnuma1 \
	libjson-c3 \
        libboost-filesystem-dev \
        libboost-thread-dev \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

######## OpenCL: ###############################
RUN apt-get update && \
    apt-get install -y --no-install-recommends ocl-icd-libopencl1 && \
    rm -rf /var/lib/apt/lists/* && mkdir -vp /tmp/opencl && cd /tmp/opencl && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-gmmlib_20.2.2_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-igc-core_1.0.4427_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-igc-opencl_1.0.4427_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-opencl_20.30.17454_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-ocloc_20.30.17454_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/20.30.17454/intel-level-zero-gpu_0.8.17454_amd64.deb &&\
    dpkg -i /tmp/opencl/*.deb && \
    ldconfig && \
    rm -rf /tmp/opencl
################################################


# Set gcc8 as default
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8

SHELL [ "/bin/bash", "-c" ]

# new cmake is required for ubuntu:
RUN cd / && wget 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh' && chmod +x ./cmake-3.17.2-Linux-x86_64.sh && ./cmake-3.17.2-Linux-x86_64.sh  --skip-license && cmake --version && rm -f ./cmake-3.17.2-Linux-x86_64.sh

# Set up Bazel
ENV BAZEL_VERSION 2.0.0
WORKDIR /bazel
RUN curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

RUN apt-get clean && rm -rf /var/lib/apt/lists/*

####### Azure SDK needs new boost:
WORKDIR /boost
RUN wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz && \
        tar xvf boost_1_68_0.tar.gz && cd boost_1_68_0 && ./bootstrap.sh && \
        ./b2 cxxstd=17 link=static cxxflags='-fPIC' cflags='-fPIC' \
         --with-chrono --with-date_time --with-filesystem --with-program_options --with-system \
         --with-random --with-thread --with-atomic --with-regex \
         --with-log --with-locale \
        install
####### Azure SDK
WORKDIR /azure
RUN git clone https://github.com/Microsoft/cpprestsdk.git && cd cpprestsdk && git checkout tags/v2.10.16 -b v2.10.16 && git submodule update --init && \
        mkdir Release/build.release && cd Release/build.release && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && \
        make --jobs=$(nproc --all) install
RUN git clone https://github.com/Azure/azure-storage-cpp.git && cd azure-storage-cpp/Microsoft.WindowsAzure.Storage && mkdir build.release && \
        cd build.release && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF  && make --jobs=$(nproc --all) && make --jobs=$(nproc --all) install
####### End of Azure SDK

################### BUILD OPENVINO FROM SOURCE - buildarg ov_use_binary=0  ############################
# NOT SUPPORTED ON UBUNTU ATM.
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; echo "NOT SUPPORTED ON UBUNTU"; exit 1
################## END OF OPENVINO SOURCE BUILD ######################

################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########
WORKDIR /

RUN if [ "$ov_use_binary" == "1" ] ; then true ; else exit 0 ; fi ; mkdir -p $TEMP_DIR && cd $TEMP_DIR/ && \
    wget $DLDT_PACKAGE_URL && \
    tar -zxf l_openvino_toolkit*.tgz && rm -f *.tgz && \
    cd l_openvino_toolkit* && \
    sed -i 's/decline/accept/g' silent.cfg && \
    ./install.sh -s silent.cfg --ignore-signature && \
    rm -Rf $TEMP_DIR $INSTALL_DIR/install_dependencies $INSTALL_DIR/uninstall* /tmp/* $DL_INSTALL_DIR/documentation $DL_INSTALL_DIR/inference_engine/samples

#################### END OF OPENVINO BINARY INSTALL


# Build AWS S3 SDK
RUN git clone https://github.com/aws/aws-sdk-cpp.git --branch 1.7.129 --single-branch --depth 1 /awssdk
WORKDIR /awssdk/build
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=s3 -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DFORCE_SHARED_CRT=OFF -DSIMPLE_INSTALL=OFF -DCMAKE_CXX_FLAGS=" -D_GLIBCXX_USE_CXX11_ABI=1 " ..
RUN make --jobs=$(nproc --all)

# Build OpenVINO Model Server
WORKDIR /ovms
COPY .bazelrc WORKSPACE /ovms/
COPY external /ovms/external/
COPY third_party /ovms/third_party/

RUN bazel build ${debug_bazel_flags} --copt="-fvisibility=hidden"  @org_tensorflow//tensorflow/core:framework
RUN bazel build ${debug_bazel_flags} --copt="-fvisibility=hidden"  @tensorflow_serving//tensorflow_serving/apis:prediction_service_cc_proto

COPY src/ /ovms/src/
COPY release_files/ /ovms/release_files/

RUN bazel build --copt="-fvisibility=hidden" ${debug_bazel_flags} //src:ovms

RUN ./bazel-bin/src/./ovms

RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; find /root/.cache/bazel/_bazel_root/ -iname '_U@*' -type d -exec cp -v -- /openvino/bin/intel64/Release/lib/plugins.xml '{}' ';'
RUN if [ "$ov_use_binary" == "1" ] ; then true ; else exit 0 ; fi ; find /root/.cache/bazel/_bazel_root/ -iname '_U@*' -type d -exec cp -v -- /opt/intel/openvino/deployment_tools/inference_engine/lib/intel64/plugins.xml '{}' ';'

RUN ./bazel-bin/src/./ovms

RUN bazel test --copt="-fvisibility=hidden" ${debug_bazel_flags} --test_summary=detailed --test_output=all //src:ovms_test
RUN ./bazel-bin/src/./ovms

COPY ${ovms_metadata_file} metadata.json

RUN ./bazel-bin/src/./ovms



