FROM centos:7.8.2003 as base_build

LABEL version="1.0.0"
LABEL description="OpenVINO Model Server"

ARG ov_source_branch=2020.4
ARG ovms_metadata_file
ARG ov_use_binary=1
ARG DLDT_PACKAGE_URL
ARG INSTALL_DIR=/opt/intel/openvino
ARG TEMP_DIR=/tmp/openvino_installer
ARG DL_INSTALL_DIR=/opt/intel/openvino/deployment_tools
ARG DL_DIR=/tmp
# build_type=[ opt, dbg ]
ARG build_type=dbg
ARG debug_bazel_flags=--strip=never\ --copt="-g"\ -c\ dbg

RUN yum install -d6 -y epel-release centos-release-scl && yum update -d6 -y && yum install -d6 -y \
            gcc \
            gcc-c++ \
            gdb \
            cmake3 \
            make \
            automake \
            autoconf \
            pkg-config \
            libtool \
            curl \
            git \
            libusb libusbx-devel \
            libcurl-devel \
            openssl-devel \
            libuuid-devel \
            patch \
            pulseaudio-libs-devel \
            python2 \
            python2-pip \
            python2-devel \
            python2-setuptools \
            python2-virtualenv \
            python3 \
            python3-pip \
            python3-devel \
            python3-setuptools \
            python3-virtualenv \
            wget \
            which \
            devtoolset-8-gcc* \
            libxml2-devel \
            yum-utils \
            numactl-libs \
            unzip && \
            yum clean all

RUN ln -s /usr/bin/cmake3 /usr/bin/cmake
SHELL [ "/usr/bin/scl", "enable", "devtoolset-8" ]
ENV CC=/opt/rh/devtoolset-8/root/bin/gcc
ENV CXX=/opt/rh/devtoolset-8/root/bin/g++
ENV BAZEL_LINKLIBS=-l%:libstdc++.a
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64/:/opt/intel/openvino/deployment_tools/ngraph/lib/

####### Azure SDK needs new boost:
WORKDIR /boost
RUN wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz && \
	tar xvf boost_1_68_0.tar.gz && cd boost_1_68_0 && ./bootstrap.sh && ./b2 cxxstd=17 install
####### Azure SDK
WORKDIR /azure
RUN git clone https://github.com/Microsoft/cpprestsdk.git && cd cpprestsdk && git checkout tags/v2.10.16 -b v2.10.16 && git submodule update --init && \
	mkdir Release/build.release && cd Release/build.release && cmake3 .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWERROR=OFF -DBUILD_SAMPLES=OFF -DBUILD_TESTS=OFF && \
	make install
RUN git clone https://github.com/Azure/azure-storage-cpp.git && cd azure-storage-cpp/Microsoft.WindowsAzure.Storage && mkdir build.release && \
	cd build.release && cmake3 .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF  && make && make install
####### End of Azure SDK


# GPU support:
RUN yum install -y yum-plugin-copr
RUN yum -y copr enable jdanecki/intel-opencl
# RUN yum install -y intel-opencl
# RUN yum install -y epel-release && yum install -y ocl-icd.x86_64

# Set up Bazel
ENV BAZEL_VERSION 2.0.0
WORKDIR /bazel
RUN curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh



################### BUILD OPENVINO FROM SOURCE - buildarg ov_use_binary=0  ############################
# Build OpenVINO and nGraph (OV dependency) with D_GLIBCXX_USE_CXX11_ABI=0
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ;  git clone --recurse-submodules https://github.com/openvinotoolkit/openvino --branch $ov_source_branch --single-branch --depth 1 /openvino
WORKDIR /openvino/build
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_SAMPLES=0 -DNGRAPH_USE_CXX_ABI=0 -DCMAKE_CXX_FLAGS=" -D_GLIBCXX_USE_CXX11_ABI=0 -Wno-error=parentheses "  ..
RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ; make --jobs=$(nproc --all)
################## END OF OPENVINO SOURCE BUILD ######################

################### TAKE OPENVINO FROM A BINARY RELEASE - buildarg ov_use_binary=1 (DEFAULT) ##########
WORKDIR /
RUN if [ "$ov_use_binary" == "1" ] ; then true ; else exit 0 ; fi ; mkdir -p $TEMP_DIR && cd $TEMP_DIR/ && \
    wget $DLDT_PACKAGE_URL && \
    tar -zxf l_openvino_toolkit*.tgz && \
    cd l_openvino_toolkit* && \
    sed -i 's/decline/accept/g' silent.cfg && \
    ./install.sh -s silent.cfg --ignore-signature && \
    rm -Rf $TEMP_DIR $INSTALL_DIR/install_dependencies $INSTALL_DIR/uninstall* /tmp/* $DL_INSTALL_DIR/documentation $DL_INSTALL_DIR/inference_engine/samples
#################### END OF OPENVINO BINARY INSTALL

# Build AWS S3 SDK
RUN git clone https://github.com/aws/aws-sdk-cpp.git --branch 1.7.129 --single-branch --depth 1 /awssdk
WORKDIR /awssdk/build
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY=s3 -DENABLE_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DFORCE_SHARED_CRT=OFF -DSIMPLE_INSTALL=OFF -DCMAKE_CXX_FLAGS=" -D_GLIBCXX_USE_CXX11_ABI=0 " ..
RUN make --jobs=$(nproc --all)
RUN mv .deps/install/lib64 .deps/install/lib

# Build OpenVINO Model Server
WORKDIR /ovms
COPY .bazelrc WORKSPACE /ovms/
COPY external /ovms/external/
COPY third_party /ovms/third_party/

RUN bazel build ${debug_bazel_flags} @org_tensorflow//tensorflow/core:framework
RUN bazel build ${debug_bazel_flags} @tensorflow_serving//tensorflow_serving/apis:prediction_service_cc_proto

COPY src/ /ovms/src/
COPY release_files/ /ovms/release_files/

##### WORKAROUND: libHDDL* links with old protobuf version. Disabling:
RUN rm -rf /opt/intel/openvino/deployment_tools/inference_engine/lib/intel64/libHDDLPlugin.so \
	   /opt/intel/openvino/deployment_tools/inference_engine/external/hddl


RUN bazel build ${debug_bazel_flags} //src:ovms
RUN ./bazel-bin/src/./ovms

RUN if [ "$ov_use_binary" == "0" ] ; then true ; else exit 0 ; fi ;  cp -r /openvino/bin/intel64/Release/lib/plugins.xml /root/.cache/bazel/_bazel_root/*/execroot/ovms/bazel-out/k8-opt/bin/_solib_k8/*/
RUN if [ "$ov_use_binary" == "1" ] ; then true ; else exit 0 ; fi ;  cp -r /opt/intel/openvino/deployment_tools/inference_engine/lib/intel64/plugins.xml /root/.cache/bazel/_bazel_root/*/execroot/ovms/bazel-out/k8-${build_type}/bin/_solib_k8/*/
RUN ./bazel-bin/src/./ovms

RUN bazel test ${debug_bazel_flags} --test_summary=detailed --test_output=all //src:ovms_test
RUN ./bazel-bin/src/./ovms

COPY ${ovms_metadata_file} metadata.json

RUN ./bazel-bin/src/./ovms
